{"ts":1366878015430,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"require 'fantasynamegenerator.rb'\r\n\r\n# simple chunk \r\ndescribe Chunk do\r\n    \r\n    before do\r\n        @chunk = Chunk.new(\"test\", \"static content\")\r\n    end\r\n\r\n    it \"Should contain static content\" do\r\n        @chunk.to_s.should == \"static content\"\r\n    end\r\n\r\nend\r\n\r\n# provider chunk \r\ndescribe Chunk do\r\n    \r\n    before do\r\n        @chunk = Chunk.new(\"test\", nil, Provider.new)\r\n    end\r\n\r\n    it \"Should not contain static content\" do\r\n        @chunk.to_s.should_not == \"static content\"\r\n    end\r\n    \r\n    it \"Should echo path and name\" do\r\n        @chunk.to_s.should == \"test\"\r\n    end\r\n\r\nend\r\n\r\n# children chunk \r\ndescribe Chunk do\r\n    \r\n    before do\r\n        @chunk = Chunk.new(\"test\")\r\n        @chunk.add_child(Chunk.new(\"Child1\", \"1\"))\r\n        @chunk.add_child(Chunk.new(\"Child2\", \"2\"))\r\n        @chunk.add_child(Chunk.space)\r\n        @chunk.add_child(Chunk.new(\"Child3\", \"3\"))\r\n    end\r\n\r\n    it \"Should not contain static content\" do\r\n        @chunk.to_s.should_not == \"static content\"\r\n    end\r\n    \r\n    it \"Should not echo path and name\" do\r\n        @chunk.to_s.should_not == \"test\"\r\n    end\r\n    \r\n    it \"Should contain child elements\" do\r\n        @chunk.to_s.should == \"12 3\"\r\n    end\r\nend\r\n\r\n# complex childen chunk \r\ndescribe Chunk do\r\n    \r\n    before do\r\n        @chunk = Chunk.new(\"test\")\r\n        @chunk.add_child(Chunk.new(\"Child1\", nil, Provider.new))\r\n        @chunk.add_child(Chunk.space)\r\n        @chunk.add_child(Chunk.new(\"Child2\", \"1\"))\r\n        @chunk.add_child(Chunk.space)\r\n        @childchunk1 = Chunk.new(\"Child3Child1\", \"2\")\r\n        @childchunk2 = Chunk.new(\"Child3Child2\", nil, Provider.new)\r\n        @child = Chunk.new(\"Child3\")\r\n        @chunk.add_child(@child)\r\n        @child.add_child(@childchunk1)\r\n        @child.add_child(@childchunk2)        \r\n    end\r\n\r\n    it \"Should not contain static content\" do\r\n        @chunk.to_s.should_not == \"static content\"\r\n    end\r\n    \r\n    it \"Should not echo path and name\" do\r\n        @chunk.to_s.should_not == \"test\"\r\n    end\r\n    \r\n    it \"Should contain child elements and their children, some from providers\" do\r\n        @chunk.to_s.should == \"test-Child1 1 2test-Child3-Child3Child2\"\r\n    end\r\nend\r\n\r\n# complex childen chunk, with the children added in different order\r\ndescribe Chunk do\r\n    \r\n    before do\r\n        @chunk = Chunk.new(\"test\")\r\n        @chunk.add_child(Chunk.new(\"Child1\", nil, Provider.new))\r\n        @chunk.add_child(Chunk.space)\r\n        @chunk.add_child(Chunk.new(\"Child2\", \"1\"))\r\n        @chunk.add_child(Chunk.space)\r\n        @childchunk1 = Chunk.new(\"Child3Child1\", \"2\")\r\n        @childchunk2 = Chunk.new(\"Child3Child2\", nil, Provider.new)\r\n        @child = Chunk.new(\"Child3\")\r\n        @child.add_child(@childchunk1)\r\n        @child.add_child(@childchunk2)        \r\n        @chunk.add_child(@child)        \r\n    end\r\n\r\n    it \"Should not contain static content\" do\r\n        @chunk.to_s.should_not == \"static content\"\r\n    end\r\n    \r\n    it \"Should not echo path and name\" do\r\n        @chunk.to_s.should_not == \"test\"\r\n    end\r\n    \r\n    it \"Should contain child elements and their children, some from providers\" do\r\n        @chunk.to_s.should == \"test-Child1 1 2test-Child3-Child3Child2\"\r\n    end\r\nend"]],"start1":0,"start2":0,"length1":0,"length2":3219}]],"length":3219}
{"contributors":[],"silentsave":false,"ts":1366879332789,"patch":[[{"diffs":[[0,"\n        @chunk."],[-1,"to_s"],[1,"render"],[0,".should == \"stat"]],"start1":201,"start2":201,"length1":36,"length2":38},{"diffs":[[0,"\n        @chunk."],[-1,"to_s"],[1,"render"],[0,".should_not == \""]],"start1":441,"start2":441,"length1":36,"length2":38},{"diffs":[[0,"\n        @chunk."],[-1,"to_s"],[1,"render"],[0,".should == \"test"]],"start1":549,"start2":549,"length1":36,"length2":38},{"diffs":[[0,"\n        @chunk."],[-1,"to_s"],[1,"render"],[0,".should_not == \""]],"start1":955,"start2":955,"length1":36,"length2":38},{"diffs":[[0,"\n        @chunk."],[-1,"to_s"],[1,"render"],[0,".should_not == \""]],"start1":1067,"start2":1067,"length1":36,"length2":38},{"diffs":[[0,"\n        @chunk."],[-1,"to_s"],[1,"render"],[0,".should == \"12 3"]],"start1":1169,"start2":1169,"length1":36,"length2":38},{"diffs":[[0,"\n        @chunk."],[-1,"to_s"],[1,"render"],[0,".should_not == \""]],"start1":1865,"start2":1865,"length1":36,"length2":38},{"diffs":[[0,"\n        @chunk."],[-1,"to_s"],[1,"render"],[0,".should_not == \""]],"start1":1977,"start2":1977,"length1":36,"length2":38},{"diffs":[[0,"\n        @chunk."],[-1,"to_s"],[1,"render"],[0,".should == \"test"]],"start1":2119,"start2":2119,"length1":36,"length2":38},{"diffs":[[0,"\n        @chunk."],[-1,"to_s"],[1,"render"],[0,".should_not == \""]],"start1":2901,"start2":2901,"length1":36,"length2":38},{"diffs":[[0,"     @chunk."],[-1,"to_s"],[1,"render"],[0,".should_not "]],"start1":3017,"start2":3017,"length1":28,"length2":30},{"diffs":[[0,"unk."],[-1,"to_s"],[1,"render"],[0,".sho"]],"start1":3167,"start2":3167,"length1":12,"length2":14}]],"length":3243,"saved":false}
{"ts":1366879629224,"patch":[[{"diffs":[[0,"    end\r\nend\r\n\r\n"],[1,"# children chunk \r\ndescribe Chunk do\r\n    \r\n    before do\r\n        @chunk = Chunk.new(\"test\")\r\n        @chunk.add_child(Chunk.new(\"Child1\", \"1\"))\r\n        @chunk.add_child(Chunk.new(\"Child2\", \"2\"))\r\n        @chunk.add_child(Chunk.space)\r\n        @chunk.add_child(Chunk.new(\"Child3\", \"3\"))\r\n    end\r\n\r\n    it \"Should not contain static content\" do\r\n        @chunk.render.should_not == \"static content\"\r\n    end\r\n    \r\n    it \"Should not echo path and name\" do\r\n        @chunk.render.should_not == \"test\"\r\n    end\r\n    \r\n    it \"Should contain child elements\" do\r\n        @chunk.render.should == \"12 3\"\r\n    end\r\nend\r\n\r\n"],[0,"# complex childe"]],"start1":1210,"start2":1210,"length1":32,"length2":650}]],"length":3861,"saved":false}
{"ts":1366879633281,"patch":[[{"diffs":[[0," children chunk "],[1,"with chance"],[0,"\r\ndescribe Chunk"]],"start1":1227,"start2":1227,"length1":32,"length2":43}]],"length":3872,"saved":false}
{"ts":1366879646843,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"    it \"Should not contain static content\" do\r\n        @chunk.render.should_not == \"static content\"\r\n    end\r\n    \r\n    it \"Should not echo path and name\" do\r\n        @chunk.render.should_not == \"test\"\r\n    end\r\n    \r\n"],[0,"    "]],"start1":1534,"start2":1534,"length1":226,"length2":8}]],"length":3654,"saved":false}
{"ts":1366879654214,"patch":[[{"diffs":[[0,"n child elements"],[1," based on chance"],[0,"\" do\r\n        @c"]],"start1":1559,"start2":1559,"length1":32,"length2":48}]],"length":3670,"saved":false}
{"ts":1366879667506,"patch":[[{"diffs":[[0,"        "],[-1,"@chunk.add_child("],[0,"Chunk.ne"]],"start1":1332,"start2":1332,"length1":33,"length2":16},{"diffs":[[0,"\"1\")"],[-1,")\r\n        @chunk.add_child(Chunk.new(\"Child2\", \"2\"))\r\n        @chunk.add_child(Chunk.space)\r\n        @chunk.add_child(Chunk.new(\"Child3\", \"3\"))"],[0,"\r\n  "]],"start1":1360,"start2":1360,"length1":152,"length2":8}]],"length":3509,"saved":false}
{"ts":1366879683406,"patch":[[{"diffs":[[0,"        "],[1,"@chunk.add_child("],[0,"Chunk.ne"]],"start1":1332,"start2":1332,"length1":16,"length2":33},{"diffs":[[0,"1\", \"1\")"],[1,")\r\n        @chunk.add_child(Chunk.new(\"Child2\", \"2\"))\r\n        @chunk.add_child(Chunk.space)\r\n        @chunk.add_child(Chunk.new(\"Child3\", \"3\"))"],[0,"\r\n    en"]],"start1":1373,"start2":1373,"length1":16,"length2":160}]],"length":3670,"saved":false}
{"ts":1366879694202,"patch":[[{"diffs":[[0,"w(\"Child1\", \"1\")"],[1,", 0..50"],[0,")\r\n        @chun"]],"start1":1365,"start2":1365,"length1":32,"length2":39}]],"length":3677,"saved":false}
{"ts":1366879712487,"patch":[[{"diffs":[[0,"w(\"Child2\", \"2\")"],[1,", 51..60"],[0,")\r\n        @chun"]],"start1":1424,"start2":1424,"length1":32,"length2":40}]],"length":3685,"saved":false}
{"ts":1366879717962,"patch":[[{"diffs":[[0,"hild(Chunk.space"],[1,", 51..60"],[0,")\r\n        @chun"]],"start1":1471,"start2":1471,"length1":32,"length2":40}]],"length":3693,"saved":false}
{"ts":1366879723723,"patch":[[{"diffs":[[0,", \"2\"), "],[-1,"5"],[1,"4"],[0,"1..60)\r\n"]],"start1":1434,"start2":1434,"length1":17,"length2":17},{"diffs":[[0,".space, "],[-1,"5"],[1,"4"],[0,"1..60)\r\n"]],"start1":1481,"start2":1481,"length1":17,"length2":17}]],"length":3693,"saved":false}
{"ts":1366879729723,"patch":[[{"diffs":[[0,"   @chunk.render"],[1,"(0)"],[0,".should == \"12 3"]],"start1":1625,"start2":1625,"length1":32,"length2":35}]],"length":3696,"saved":false}
{"ts":1366879737792,"patch":[[{"diffs":[[0,"(0).should == \"1"],[-1,"2 "],[0,"3\"\r\n    end\r\nend"]],"start1":1641,"start2":1641,"length1":34,"length2":32}]],"length":3694,"saved":false}
{"ts":1366879742103,"patch":[[{"diffs":[[0,"\"))\r\n    end\r\n\r\n"],[1,"    it \"Should contain child elements based on chance\" do\r\n        @chunk.render(0).should == \"13\"\r\n    end\r\n    it \"Should contain child elements based on chance\" do\r\n        @chunk.render(0).should == \"13\"\r\n    end\r\n    it \"Should contain child elements based on chance\" do\r\n        @chunk.render(0).should == \"13\"\r\n    end\r\n"],[0,"    it \"Should c"]],"start1":1545,"start2":1545,"length1":32,"length2":359}]],"length":4021,"saved":false}
{"ts":1366879762572,"patch":[[{"diffs":[[0,"  @chunk.render("],[-1,"0"],[1,"45"],[0,").should == \"13\""]],"start1":1735,"start2":1735,"length1":33,"length2":34},{"diffs":[[0,"45).should == \"1"],[1,"2 "],[0,"3\"\r\n    end\r\n   "]],"start1":1751,"start2":1751,"length1":32,"length2":34},{"diffs":[[0,"  @chunk.render("],[1,"8"],[0,"0).should == \"13"]],"start1":1847,"start2":1847,"length1":32,"length2":33},{"diffs":[[0,"== \""],[-1,"13\"\r\n    end\r\n    it \"Should contain child elements based on chance\" do\r\n        @chunk.render(0).should == \"1"],[0,"3\"\r\n"]],"start1":1874,"start2":1874,"length1":118,"length2":8}]],"length":3915,"saved":false}
{"ts":1366880771278,"patch":[[{"diffs":[[0,"l, Provider.new)"],[1,", 0..50"],[0,")\r\n        @chun"]],"start1":2047,"start2":2047,"length1":32,"length2":39}]],"length":3922,"saved":false}
